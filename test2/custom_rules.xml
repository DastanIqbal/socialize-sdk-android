<?xml version="1.0" encoding="UTF-8"?>
<project name="socialize-sdk-test-custom">

    <target name="-compile" depends="-pre-build, -build-setup, -code-gen, -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">

<!-- Socialize Customization Begin
    ==================================================================================================================
    AndroidMock requires Android Framework classes (from android.jar) to be in the classpath during compilation
    but the -compile target does not provide for changing the classpath.
    Bug filed with Google here: https://code.google.com/p/android/issues/detail?id=53444&thanks=53444&ts=1363819521
-->

            <path id="project.javac.classpath">
                <path refid="project.all.jars.path" />
                <path refid="tested.project.classpath" />
                <pathelement location="${android.classpath}" />
            </path>

<!-- Socialize Customization End
    ==================================================================================================================
    The remainder of this target is unchanged
-->
            <javac encoding="${java.encoding}"
                   source="${java.source}" target="${java.target}"
                   debug="true" extdirs="" includeantruntime="false"
                   destdir="${out.classes.absolute.dir}"
                   bootclasspathref="project.target.class.path"
                   verbose="${verbose}"
                   classpathref="project.javac.classpath"
                   fork="${need.javac.fork}">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <compilerarg line="${java.compilerargs}" />
            </javac>

            <if condition="${build.is.instrumented}">
                <then>
                    <echo level="info">Instrumenting classes from ${out.absolute.dir}/classes...</echo>

                    <!-- build the filter to remove R, Manifest, BuildConfig -->
                    <getemmafilter
                            appPackage="${project.app.package}"
                            libraryPackagesRefId="project.library.packages"
                            filterOut="emma.default.filter"/>

                    <!-- define where the .em file is going. This may have been
                         setup already if this is a library -->
                    <property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />

                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes"
                               metadatafile="${emma.coverage.absolute.file}">
                            <filter excludes="${emma.default.filter}" />
                            <filter value="${emma.filter}" />
                        </instr>
                    </emma>
                </then>
            </if>

            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo level="info">Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo level="info">Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>

                    <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />

                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}"
                                 includes="**/*.class"
                                 excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>

        </do-only-if-manifest-hasCode>
    </target>

    <target name="report" depends="-setup">
        <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
               expression="/manifest/@package" output="tested.project.app.package" />
        <mkdir dir="junit-results"/>

        <echo level="info">Setting permission to download the junit files...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="run-as" />
            <arg value="${tested.project.app.package}" />
            <arg value="chmod" />
            <arg value="644" />
            <arg value="files" />
        </exec>

        <exec executable="${adb}" failonerror="true" dir="junit-results">
            <arg line="${adb.device.arg}" />
            <arg value="pull" />
            <arg value="/data/data/${tested.project.app.package}/files/" />
        </exec>
    </target>

</project>